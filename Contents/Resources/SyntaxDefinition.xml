<?xml version="1.0" encoding="UTF-8"?>
<syntax>

    <head>
        <name>CoffeeScript</name>
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$]]></charsintokens> 
        <!-- <charsdelimitingtokens><![CDATA[ -]]></charsdelimitingtokens> -->
        <!-- <charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@$</=>!]]></charsincompletion> -->
    </head>

    <states>

        <!--
        The <default> tag specifies what is colored within the default state (see above).
        It features the following attributes, all optional if not noted otherwise:
            id
                Has to be a unique string. Has to be specified.
            color
                a html comptible color in three or six letter hexadecimal format.
                Used for text on bright document background colors.
            inverted-color
                a html comptible color in three or six letter hexadecimal format.
                Used for text if a dark document background color is set.
            font-weight
                normal  Normal font-weight (default)
                bold    Bold text in popup
            font-style
                normal  Normal font-weight (default)
                italic  Bold text in popup
            usesymbolsfrommode
                a mode name to use the symbol recognition from
                when left out the value is inherited from the parent state
            useautocompletefrommode
                a mode name to use the autocomplete from - default is this mode
                when left out the value is inherited from the parent state
            type
                a string description of the type. currently only the values
                "string" and "comment" have meaning and cause bracket matching
                and syntax highlighting to ignore these areas of text

        -->

        <default id="Base" scope="meta.default">

            <!--
            The <keywords> tag specifies keyword groups within the current state.
            It features the following attributes, all optional if not noted otherwise:
                id
                    Has to be a unique string. Has to be specified.
                color
                    a html comptible color in three or six letter hexadecimal format.
                    Used for text on bright document background colors.
                inverted-color
                    a html comptible color in three or six letter hexadecimal format.
                    Used for text if a dark document background color is set.
                font-weight
                    normal  Normal font-weight (default)
                    bold    Bold text in popup
                font-style
                    normal  Normal font-weight (default)
                    italic  Bold text in popup
                casesensitive
                    yes     This group is case sensitive (default)
                    no      Ignore case for the group
                useforautocomplete
                    yes     Add this group's strings to the autocomplete dictionary (default)
                    no      Don't add to autocomplete dictionary
            -->

            <keywords id="Keywords" useforautocomplete="yes" casesensitive="no" scope="keyword.control">
            <!-- STUDIO added case insensitive -->

                <string>if</string>
                <string>unless</string>
                <string>else</string>
                <string>switch</string>
                <string>when</string>
                <string>then</string>

                <!-- Loops -->
                <string>for</string>
                <string>while</string>
                <string>until</string>
                <string>do</string>

                <!-- Objects and scope -->
                <string>new</string>
                <string>this</string>

                <!-- Flow -->
                <string>break</string>
                <string>continue</string>
                <string>return</string>

                <!-- Errors -->
                <string>try</string>
                <string>catch</string>
                <string>throw</string>

                <!-- Operators and Aliases -->
                <string>is</string>
                <string>isnt</string>
                <string>not</string>
                <string>and</string>
                <string>or</string>
                <string>true</string>
                <string>yes</string>
                <string>on</string>
                <string>false</string>
                <string>no</string>
                <string>of</string>
                <string>off</string>
                <string>in</string>
            </keywords>

            <state id="Function" scope="language.function.coffeescript">
                <begin><regex>(?:[\(][\w\s\.\,\$]*[\)][\s])?[-=]></regex></begin>
                <end><regex>[\s]</regex></end>
            </state>


            <keywords id="Numbers" useforautocomplete="no" scope="constant.numeric">
              <regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
            </keywords>


            <keywords id="Properties" useforautocomplete="no" scope="language.variable.instance">
              <regex>(@\w*)</regex>
            </keywords>

            <keywords id="Properties" useforautocomplete="no" scope="language.variable.instance">
              <regex>(\w+(\s+)?:)</regex>
            </keywords>

            <keywords id="Classes" useforautocomplete="no" scope="keyword.class">
              <regex>(\b[A-Z]\w*)</regex>
            </keywords>

            <state id="Comment" type="comment" scope="comment.block.documentation">
                <begin><regex>###</regex></begin>
                <end><regex>###</regex></end>
            </state>


            <state id="Single Comment" type="comment" scope="comment.line">
                <begin><regex>#</regex></begin>
                <end><regex>[\n\r]</regex></end>
            </state>


            <state id="String" type="string" scope="string.double">
                <begin><regex>"</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>

                <state id="Interpolation" scope="language.variable.interpolation">
                  <begin><regex>#{</regex></begin>
                  <end><regex>}</regex></end>  
                </state>
            </state>

            <state id="Single String" type="string" scope="string.single">
                <begin><regex>'</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)'</regex></end>
            </state>


            <state id="RegularExpression" scope="string.regex">
                <begin><regex>(?i)(?&lt;=[=(,:\+~]|^|return|;)\s*/(?![/*+{}?])</regex></begin>
                <end><regex>/[cgimosx]*</regex></end>
            </state>


            <state id="Class Blocks" foldable="yes" scope="meta.block">
              <begin><regex>^class[^\n]+\n</regex></begin>
              <end><regex>(?:\r?\n|\r)(?=(?:\r?\n|\r)(?:\r?\n|\r)\S|(?:\r?\n|\r)\S|\S)</regex></end>
              <import/>
            </state>

            <state id="Function Blocks" foldable="yes" scope="meta.block">
              <begin><regex>^(?'functionstartingwhitespace'[ \t]*).*?(?:[\(][\w\s\.\,\$]*[\)][\s])?[-=]></regex></begin>
              <end><regex>(?:\r?\n|\r)(?=(?:\r?\n|\r)(?:\r?\n|\r)(?#see-insert-start-group:functionstartingwhitespace)\S|(?:\r?\n|\r)(?#see-insert-start-group:functionstartingwhitespace)\S|(?#see-insert-start-group:functionstartingwhitespace)\S|(?:\r?\n|\r)(?:\r?\n|\r)\S|(?:\r?\n|\r)\S|\S)</regex></end>
              <import/>
            </state>
        </default>

    </states>

</syntax>
